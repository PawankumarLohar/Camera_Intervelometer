
intervelometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800040  00800040  0000017c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004fa  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000040c  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000340  00000000  00000000  00000b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000303  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  0000122b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	4e c0       	rjmp	.+156    	; 0xa0 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	5c c0       	rjmp	.+184    	; 0xc2 <__vector_4>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_clear_bss>:
  22:	20 e0       	ldi	r18, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	01 c0       	rjmp	.+2      	; 0x2c <.do_clear_bss_start>

0000002a <.do_clear_bss_loop>:
  2a:	1d 93       	st	X+, r17

0000002c <.do_clear_bss_start>:
  2c:	a1 34       	cpi	r26, 0x41	; 65
  2e:	b2 07       	cpc	r27, r18
  30:	e1 f7       	brne	.-8      	; 0x2a <.do_clear_bss_loop>
  32:	2d d0       	rcall	.+90     	; 0x8e <main>
  34:	67 c0       	rjmp	.+206    	; 0x104 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <gpioConfig>:
    }
}

void gpioConfig(void){
	
	DDRB |= (1<<PIN_PB1);	/*PB1 pin as output*/
  38:	41 b1       	in	r20, 0x01	; 1
  3a:	42 60       	ori	r20, 0x02	; 2
  3c:	41 b9       	out	0x01, r20	; 1
	DDRB |= (1<<PIN_PB0);	/*PB0 pin as output*/	
  3e:	41 b1       	in	r20, 0x01	; 1
  40:	41 60       	ori	r20, 0x01	; 1
  42:	41 b9       	out	0x01, r20	; 1
	DDRB &= ~(1<<PIN_PB2);	/*PB2 pin as input*/
  44:	41 b1       	in	r20, 0x01	; 1
  46:	4b 7f       	andi	r20, 0xFB	; 251
  48:	41 b9       	out	0x01, r20	; 1
	PUEB |= (1<<PIN_PB2);	/*PB2 pin pull up internally*/
  4a:	43 b1       	in	r20, 0x03	; 3
  4c:	44 60       	ori	r20, 0x04	; 4
  4e:	43 b9       	out	0x03, r20	; 3
  50:	08 95       	ret

00000052 <interruptConfig>:
}

void interruptConfig(void){
	
	sei(); /*global interrupt enable*/
  52:	78 94       	sei
	EICRA = 0x00; /*interrupt  low on level */
  54:	15 bb       	out	0x15, r17	; 21
	EIMSK = 0x01; /*external interrupt enable*/
  56:	41 e0       	ldi	r20, 0x01	; 1
  58:	43 bb       	out	0x13, r20	; 19
	EIFR = 0x00;/*external interrupt flag cleared*/
  5a:	14 bb       	out	0x14, r17	; 20
	
	TIMSK0 = 0x01; /*timer0 overflow interrupt enable*/
  5c:	4b bd       	out	0x2b, r20	; 43
	TIFR0 &= ~(1<<TOV0); /*timer0 overflow interrupt flag clear*/
  5e:	4a b5       	in	r20, 0x2a	; 42
  60:	4e 7f       	andi	r20, 0xFE	; 254
  62:	4a bd       	out	0x2a, r20	; 42
  64:	08 95       	ret

00000066 <timerZeroConfig>:
	
}

void timerZeroConfig(void){
	
	TCCR0A = 0x00; /*Timer0 normal mode operation*/
  66:	1e bd       	out	0x2e, r17	; 46
  68:	08 95       	ret

0000006a <startup>:
}

void startup(void){
	
	EIMSK = 0x00; /*external interrupt disable*/
  6a:	13 bb       	out	0x13, r17	; 19
	
	for(uint8_t i = 0 ; i<20 ; i++){
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	0c c0       	rjmp	.+24     	; 0x88 <startup+0x1e>
		PORTB ^= (1<<PIN_PB0);
  70:	62 b1       	in	r22, 0x02	; 2
  72:	41 e0       	ldi	r20, 0x01	; 1
  74:	46 27       	eor	r20, r22
  76:	42 b9       	out	0x02, r20	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	6f e3       	ldi	r22, 0x3F	; 63
  7a:	7c e9       	ldi	r23, 0x9C	; 156
  7c:	61 50       	subi	r22, 0x01	; 1
  7e:	70 40       	sbci	r23, 0x00	; 0
  80:	e9 f7       	brne	.-6      	; 0x7c <startup+0x12>
  82:	00 c0       	rjmp	.+0      	; 0x84 <startup+0x1a>
  84:	00 00       	nop

void startup(void){
	
	EIMSK = 0x00; /*external interrupt disable*/
	
	for(uint8_t i = 0 ; i<20 ; i++){
  86:	5f 5f       	subi	r21, 0xFF	; 255
  88:	54 31       	cpi	r21, 0x14	; 20
  8a:	90 f3       	brcs	.-28     	; 0x70 <startup+0x6>
		PORTB ^= (1<<PIN_PB0);
		_delay_ms(20);
	}
}
  8c:	08 95       	ret

0000008e <main>:
uint8_t timerCounter;
uint8_t interruptCounter = 0x00;

int main(void){
    /* Replace with your application code */
			CCP = 0xD8;	  //unlock protected registers
  8e:	48 ed       	ldi	r20, 0xD8	; 216
  90:	4c bf       	out	0x3c, r20	; 60
			CLKMSR =0x00;
  92:	17 bf       	out	0x37, r17	; 55
			CLKPSR = 0;	  // No clock divider
  94:	16 bf       	out	0x36, r17	; 54
			
	gpioConfig();
  96:	d0 df       	rcall	.-96     	; 0x38 <gpioConfig>
	startup();
  98:	e8 df       	rcall	.-48     	; 0x6a <startup>
	interruptConfig();
  9a:	db df       	rcall	.-74     	; 0x52 <interruptConfig>
	timerZeroConfig();
  9c:	e4 df       	rcall	.-56     	; 0x66 <timerZeroConfig>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x10>

000000a0 <__vector_1>:
		PORTB ^= (1<<PIN_PB0);
		_delay_ms(20);
	}
}

ISR( INT0_vect ){
  a0:	1f 93       	push	r17
  a2:	0f 93       	push	r16
  a4:	0f b7       	in	r16, 0x3f	; 63
  a6:	0f 93       	push	r16
  a8:	10 e0       	ldi	r17, 0x00	; 0
  aa:	4f 93       	push	r20
	
	TCNT0H = 0x00;	/*loaded 0xE174 value 1sec time interval*/
  ac:	19 bd       	out	0x29, r17	; 41
	TCNT0L = 0x00;
  ae:	18 bd       	out	0x28, r17	; 40


	TCCR0B = 0x01;/*start timer with prescalar 8*/
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	4d bd       	out	0x2d, r20	; 45
		
	
	EIFR = 0x00;/*external interrupt flag cleared*/
  b4:	14 bb       	out	0x14, r17	; 20
}
  b6:	4f 91       	pop	r20
  b8:	0f 91       	pop	r16
  ba:	0f bf       	out	0x3f, r16	; 63
  bc:	0f 91       	pop	r16
  be:	1f 91       	pop	r17
  c0:	18 95       	reti

000000c2 <__vector_4>:

ISR( TIM0_OVF_vect ){
  c2:	1f 93       	push	r17
  c4:	0f 93       	push	r16
  c6:	0f b7       	in	r16, 0x3f	; 63
  c8:	0f 93       	push	r16
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
	
	timerCounter++;
  d0:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
  d2:	4f 5f       	subi	r20, 0xFF	; 255
  d4:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
		if(timerCounter == 30){
  d6:	4e 31       	cpi	r20, 0x1E	; 30
  d8:	49 f4       	brne	.+18     	; 0xec <__vector_4+0x2a>
			PORTB ^= (1<<PIN_PB1);
  da:	52 b1       	in	r21, 0x02	; 2
  dc:	42 e0       	ldi	r20, 0x02	; 2
  de:	45 27       	eor	r20, r21
  e0:	42 b9       	out	0x02, r20	; 2
			PORTB ^= (1<<PIN_PB0);
  e2:	52 b1       	in	r21, 0x02	; 2
  e4:	41 e0       	ldi	r20, 0x01	; 1
  e6:	45 27       	eor	r20, r21
  e8:	42 b9       	out	0x02, r20	; 2
			timerCounter = 0;
  ea:	10 a9       	sts	0x40, r17	; 0x800040 <__DATA_REGION_ORIGIN__>
		}
	 
				TIFR0 &= ~(1<<TOV0) ;
  ec:	4a b5       	in	r20, 0x2a	; 42
  ee:	4e 7f       	andi	r20, 0xFE	; 254
  f0:	4a bd       	out	0x2a, r20	; 42
				TCNT0H = 0x00;	/*loaded 0xE174 value 1sec time interval*/
  f2:	19 bd       	out	0x29, r17	; 41
				TCNT0L = 0x00;
  f4:	18 bd       	out	0x28, r17	; 40
  f6:	5f 91       	pop	r21
  f8:	4f 91       	pop	r20
  fa:	0f 91       	pop	r16
  fc:	0f bf       	out	0x3f, r16	; 63
  fe:	0f 91       	pop	r16
 100:	1f 91       	pop	r17
 102:	18 95       	reti

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
